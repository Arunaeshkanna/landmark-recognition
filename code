!pip install gradio
!pip install tensorflow
!pip install tensorflow_hub
!pip install pillow
!pip install pandas
!pip install geopy 
!pip install wikipedia-api

import gradio as gr
import numpy as np
import pandas as pd
import tensorflow as tf
import tensorflow_hub as hub
from PIL import Image
from geopy.geocoders import Nominatim
import folium
import requests

# URLs
TF_MODEL_URL = 'https://tfhub.dev/google/on_device_vision/classifier/landmarks_classifier_asia_V1/1'
LABEL_MAP_URL = 'https://www.gstatic.com/aihub/tfhub/labelmaps/landmarks_classifier_asia_V1_label_map.csv'
IMAGE_SHAPE = (321, 321)

# Google Maps API Key
GOOGLE_MAPS_API_KEY = 'your_google_maps_api_key_here'

# Load the model
try:
    classifier = tf.keras.Sequential([
        hub.KerasLayer(TF_MODEL_URL, input_shape=IMAGE_SHAPE + (3,), output_key="predictions:logits")
    ])
    print("Model loaded successfully.")
except Exception as e:
    print(f"Error loading the model: {e}")

try:
    df = pd.read_csv(LABEL_MAP_URL)
    label_map = dict(zip(df.id.astype(str), df.name))
    print("Label map loaded successfully.")
    print("Sample labels:", list(label_map.items())[:5])  # Print sample of label map
except Exception as e:
    print(f"Error loading the label map: {e}")

def classify_image(image):
    try:
        img = np.array(image) / 255.0  # Normalize the image
        img = tf.image.resize(img, IMAGE_SHAPE)  # Resize the image
        img = np.expand_dims(img, axis=0)  # Add batch dimension
        predictions = classifier(img)
        predicted_label_id = np.argmax(predictions, axis=-1)[0]
        predicted_label = label_map.get(str(predicted_label_id), "Unknown")
        return predicted_label
    except Exception as e:
        print(f"Error in classify_image: {e}")
        return "Error"

def get_map_location(loc):
    try:
        geolocator = Nominatim(user_agent="landmark_recognition")
        location = geolocator.geocode(loc)
        if location:
            return location.address, location.latitude, location.longitude
        else:
            return "Location not found", None, None
    except Exception as e:
        print(f"Error in get_map_location: {e}")
        return "Error", None, None

def create_map(latitude, longitude):
    try:
        if latitude is not None and longitude is not None:
            m = folium.Map(location=[latitude, longitude], zoom_start=15)

            google_satellite_layer = folium.TileLayer(
                tiles=f"https://mt1.google.com/vt/lyrs=s&x={{x}}&y={{y}}&z={{z}}&apikey={GOOGLE_MAPS_API_KEY}",
                attr="Google",
                name="Google Satellite",
                overlay=True,
                control=True,
            )
            m.add_child(google_satellite_layer)

            folium.Marker([latitude, longitude], popup='Predicted Location').add_to(m)

            street_view_link = f'<a href="https://www.google.com/maps?q=&layer=c&cbll={latitude},{longitude}" target="_blank">Street View link</a>'
            folium.Marker([latitude, longitude], popup=street_view_link).add_to(m)

            m.add_child(folium.LatLngPopup())  # Adds lat/lng popup on click
            m.add_child(folium.LayerControl())  # Adds layer control

            return m._repr_html_()
        else:
            return "Map not available"
    except Exception as e:
        print(f"Error in create_map: {e}")
        return "Error"

def fetch_landmark_info(landmark_name):
    try:
        wikipedia_url = f"https://en.wikipedia.org/api/rest_v1/page/summary/{landmark_name}"
        response = requests.get(wikipedia_url)
        if response.status_code == 200:
            data = response.json()
            summary = data.get('extract', 'No information available.')
            return summary
        else:
            return "Information not available."
    except Exception as e:
        print(f"Error fetching landmark info: {e}")
        return "Error"

def predict_landmark(*images):
    results = []
    for i, image in enumerate(images):
        try:
            img = Image.fromarray(image).convert("RGB")
            prediction = classify_image(img)
            address, latitude, longitude = get_map_location(prediction)
            map_html = create_map(latitude, longitude)
            street_view_link = f'<a href="https://www.google.com/maps?q=&layer=c&cbll={latitude},{longitude}" target="_blank" style="color: blue; text-decoration: underline;">Street View link</a>'
            landmark_info = fetch_landmark_info(prediction)

            results.extend([
                prediction,
                address,
                {'Latitude': latitude, 'Longitude': longitude},
                map_html,
                street_view_link,
                landmark_info
            ])
        except Exception as e:
            print(f"Error in predict_landmark for image {i+1}: {e}")
            results.extend(["Error", "Error", {"Latitude": None, "Longitude": None}, "Error", "Error", "Error"])
    return results

# Gradio Interface
inputs = [gr.Image(image_mode='RGB', type='numpy', label=f"Image {i+1}") for i in range(3)]
title = "Landmark Recognition with Enhanced Google Maps and Street View"
description = "Upload up to three images and get the predicted landmarks along with their addresses, interactive maps with Google Maps satellite view, and street view links. You'll also get information about the landmark's history, culture, and more."

outputs = [
    gr.Textbox(label="Predicted Landmark 1"),
    gr.Textbox(label="Address 1"),
    gr.JSON(label="Latitude & Longitude 1"),
    gr.HTML(label="Map 1"),
    gr.HTML(label="Street View Link 1"),
    gr.Textbox(label="Landmark Info 1"),  # Additional output for landmark information
    gr.Textbox(label="Predicted Landmark 2"),
    gr.Textbox(label="Address 2"),
    gr.JSON(label="Latitude & Longitude 2"),
    gr.HTML(label="Map 2"),
    gr.HTML(label="Street View Link 2"),
    gr.Textbox(label="Landmark Info 2"),  # Additional output for landmark information
    gr.Textbox(label="Predicted Landmark 3"),
    gr.Textbox(label="Address 3"),
    gr.JSON(label="Latitude & Longitude 3"),
    gr.HTML(label="Map 3"),
    gr.HTML(label="Street View Link 3"),
    gr.Textbox(label="Landmark Info 3"),  # Additional output for landmark information
]

gr.Interface(fn=predict_landmark, inputs=inputs, outputs=outputs, title=title, description=description).launch()


a perfect code for landmark recognition with enhanced google maps and street view




